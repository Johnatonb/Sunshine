        //d_list[0] = new sphere(vec3(0.0f, -1000.0f, -1.0f), 1000.0f, new lambertian(new checker_txture(vec3(0.2f, 0.3f, 0.1f), vec3(0.9f, 0.9f, 0.9f))));
        /*d_list[0] = new sphere(vec3(0.0f, -1000.0f, 0.0f), 1000.0f, new lambertian(new noise_txture(&local_rand_state,4)));
        d_list[1] = new sphere(vec3(0.0f, 2.0f, 0.0f), 2.0f, new lambertian(new noise_txture(&local_rand_state,4)));
        d_list[2] = new sphere(vec3(0.0f, 7.0f, 0.0f), 2.0f, new diffuse_light(vec3(4.0f,4.0f,4.0f)));
        d_list[3] = new xy_rect(3.0f, 5.0f, 1.0f, 3.0f, -2.0f, new diffuse_light(vec3(4.0f,4.0f,4.0f)));*/
        /*lambertian* red = new lambertian(vec3(0.65f, 0.05f, 0.05f));
        lambertian* white = new lambertian(vec3(0.73f, 0.73f, 0.73f));
        lambertian* green = new lambertian(vec3(0.12f, 0.45f, 0.15f));
        diffuse_light* light = new diffuse_light(vec3(15.0f, 15.0f, 15.0f));*/

        //d_list[6] = new rotate_y(new box(vec3(260.0f,0.0f,295.0f), vec3(430.0f, 330.0f, 460.0f), new lambertian(vec3(0.73f, 0.73f, 0.73f))), 0.0f);
        //d_list[6] = new rotate_y(new box(vec3(130.0f,0.0f,65.0f), vec3(295.0f, 165.0f, 230.0f), new lambertian(vec3(0.73f, 0.73f, 0.73f))), 0.0f);
        //d_list[6] = new translate(new translate(new box(vec3(0.0f, 0.0f, 0.0f), vec3(165.0f, 330.0f, 165.0f), new lambertian(vec3(0.73f, 0.73f, 0.73f))), vec3(265.0f, 0.0f, 295.0f)), vec3(0.0f, 0.0f, 0.0f));
        //d_list[7] = new translate(new translate(new box(vec3(0.0f, 0.0f, 0.0f), vec3(165.0f, 165.0f, 165.0f), new lambertian(vec3(0.73f, 0.73f, 0.73f))), vec3(130.0f, 0.0f, 65.0f)), vec3(0.0f, 0.0f, 0.0f));
        //d_list[6] = new sphere(vec3(255.0f, 255.0f, 255.0f), 50.0f, new lambertian(vec3(0.73f, 0.73f, 0.73f)));
        //auto p0 = new sphere(vec3(0.0f, 0.0f, 0.0f), 50.0f, new lambertian(vec3(0.73f, 0.73f, 0.73f)));
        //d_list[6] = new translate(new translate(p0, vec3(255.0f, 255.0f, 255.0f)), vec3(0.0f, 0.0f, 0.0f));
        //d_list[6] = new translate(p0, vec3(255.0f, 255.0f, 255.0f));

        /*int i = 1;
        for (int a = -11; a < 11; a++) {
            for (int b = -11; b < 11; b++) {
                float choose_mat = RND;
                vec3 center(a + RND, 0.2, b + RND);
                if (choose_mat < 0.8f) {
                    vec3 center2 = center + vec3(0.0f, 0.5f * RND, 0.0f);
                    d_list[i++] = new moving_sphere(center, center2, 0.0f, 1.0f, 0.2f, new lambertian(vec3(RND * RND, RND * RND, RND * RND)));
                } else if (choose_mat < 0.95f) {
                    d_list[i++] = new sphere(center, 0.2f, new metal(vec3(0.5f * (1.0f + RND), 0.5f * (1.0f + RND), 0.5f * (1.0f + RND)), 0.5f * RND));
                } else {
                    d_list[i++] = new sphere(center, 0.2f, new dielectric(1.5));
                }
            }
        }
        d_list[i++] = new sphere(vec3(0, 1, 0), 1.0, new dielectric(1.5));
        d_list[i++] = new sphere(vec3(-4, 1, 0), 1.0, new lambertian(vec3(0.4, 0.2, 0.1)));
        d_list[i++] = new sphere(vec3(4, 1, 0), 1.0, new metal(vec3(0.7, 0.6, 0.5), 0.0));*/